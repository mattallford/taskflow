name: Build and Push

on:
  push:
    branches: [ main, 'feature/**', 'hotfix/**' ]
    paths:
      - '.github/workflows/build.yml'
      - 'deploy/k8s/**'
      - 'src/**'
      - 'README.md'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/workflows/build.yml'
      - 'deploy/k8s/**'
      - 'src/**'
      - 'README.md'
  workflow_dispatch:

env:
  REGISTRY: docker.io

jobs:
  version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.semVer }}
      fullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}
      major: ${{ steps.gitversion.outputs.major }}
      minor: ${{ steps.gitversion.outputs.minor }}
      patch: ${{ steps.gitversion.outputs.patch }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for GitVersion

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '5.x'

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v1.1.1

  test:
    name: Test
    needs: version
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # .NET API Tests
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore .NET dependencies
      run: dotnet restore TaskFlow.sln
      
    - name: Build .NET solution
      run: dotnet build TaskFlow.sln --no-restore --configuration Release
      
    - name: Run .NET tests
      run: dotnet test TaskFlow.sln --no-build --configuration Release --verbosity normal

    # React Frontend Tests
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: src/TaskFlow.Web/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: src/TaskFlow.Web
      run: npm ci
      
    - name: Run frontend tests
      working-directory: src/TaskFlow.Web
      run: npm test -- --watchAll=false --passWithNoTests
      env:
        CI: true

  build:
    name: Build ${{ matrix.platform }}
    needs: [version, test]
    runs-on: ${{ matrix.runner }}
    
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            arch: amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            arch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build and Push API Container
    - name: Build and push API image (${{ matrix.arch }})
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/TaskFlow.Api/Dockerfile
        platforms: ${{ matrix.platform }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/taskflow-api:${{ needs.version.outputs.version }}-${{ matrix.arch }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build and Push Web Container  
    - name: Build and push Web image (${{ matrix.arch }})
      uses: docker/build-push-action@v5
      with:
        context: ./src/TaskFlow.Web
        file: ./src/TaskFlow.Web/Dockerfile
        platforms: ${{ matrix.platform }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/taskflow-web:${{ needs.version.outputs.version }}-${{ matrix.arch }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  manifest:
    name: Create Multi-Arch Manifests
    needs: [version, build]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Create multi-arch manifest for API
    - name: Create API manifest list
      run: |
        # Create versioned tag manifest
        docker buildx imagetools create -t ${{ secrets.DOCKER_USERNAME }}/taskflow-api:${{ needs.version.outputs.version }} \
          ${{ secrets.DOCKER_USERNAME }}/taskflow-api:${{ needs.version.outputs.version }}-amd64 \
          ${{ secrets.DOCKER_USERNAME }}/taskflow-api:${{ needs.version.outputs.version }}-arm64
        
        # Create latest tag manifest
        docker buildx imagetools create -t ${{ secrets.DOCKER_USERNAME }}/taskflow-api:latest \
          ${{ secrets.DOCKER_USERNAME }}/taskflow-api:${{ needs.version.outputs.version }}-amd64 \
          ${{ secrets.DOCKER_USERNAME }}/taskflow-api:${{ needs.version.outputs.version }}-arm64

    # Create multi-arch manifest for Web
    - name: Create Web manifest list
      run: |
        # Create versioned tag manifest
        docker buildx imagetools create -t ${{ secrets.DOCKER_USERNAME }}/taskflow-web:${{ needs.version.outputs.version }} \
          ${{ secrets.DOCKER_USERNAME }}/taskflow-web:${{ needs.version.outputs.version }}-amd64 \
          ${{ secrets.DOCKER_USERNAME }}/taskflow-web:${{ needs.version.outputs.version }}-arm64
        
        # Create latest tag manifest
        docker buildx imagetools create -t ${{ secrets.DOCKER_USERNAME }}/taskflow-web:latest \
          ${{ secrets.DOCKER_USERNAME }}/taskflow-web:${{ needs.version.outputs.version }}-amd64 \
          ${{ secrets.DOCKER_USERNAME }}/taskflow-web:${{ needs.version.outputs.version }}-arm64

    # Note: Build-specific tags remain for debugging/rollback if needed

    # Summary
    - name: Build summary
      run: |
        echo "## Multi-Arch Build Complete âœ…" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Version Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Semantic Version**: \`${{ needs.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Full Version**: \`${{ needs.version.outputs.fullSemVer }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Container Images (Multi-Architecture)" >> $GITHUB_STEP_SUMMARY
        echo "- **API Latest**: \`${{ secrets.DOCKER_USERNAME }}/taskflow-api:latest\` (linux/amd64, linux/arm64)" >> $GITHUB_STEP_SUMMARY
        echo "- **API Versioned**: \`${{ secrets.DOCKER_USERNAME }}/taskflow-api:${{ needs.version.outputs.version }}\` (linux/amd64, linux/arm64)" >> $GITHUB_STEP_SUMMARY
        echo "- **Web Latest**: \`${{ secrets.DOCKER_USERNAME }}/taskflow-web:latest\` (linux/amd64, linux/arm64)" >> $GITHUB_STEP_SUMMARY
        echo "- **Web Versioned**: \`${{ secrets.DOCKER_USERNAME }}/taskflow-web:${{ needs.version.outputs.version }}\` (linux/amd64, linux/arm64)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Details" >> $GITHUB_STEP_SUMMARY
        echo "- **AMD64**: Built natively on ubuntu-latest" >> $GITHUB_STEP_SUMMARY
        echo "- **ARM64**: Built natively on ubuntu-24.04-arm" >> $GITHUB_STEP_SUMMARY
        echo "- **Versioning**: Semantic versioning via GitVersion" >> $GITHUB_STEP_SUMMARY