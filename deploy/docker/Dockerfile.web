# TaskFlow Web Frontend Dockerfile
# Multi-stage build for production-ready React application

# Build stage
FROM node:18-alpine AS build

# Set working directory
WORKDIR /app

# Copy package files for dependency installation
COPY src/TaskFlow.Web/package*.json ./

# Install dependencies (including dev dependencies for build)
RUN npm ci

# Copy source code
COPY src/TaskFlow.Web/src/ src/
COPY src/TaskFlow.Web/public/ public/
COPY src/TaskFlow.Web/tsconfig.json .

# Build the React application for production
RUN npm run build

# Production stage - Nginx for serving static files
FROM nginx:alpine AS production

# Copy custom nginx configuration
COPY deploy/docker/nginx.conf /etc/nginx/nginx.conf

# Copy built React application from build stage
COPY --from=build /app/build /usr/share/nginx/html

# Set permissions for existing nginx user
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d

# Create run directory for nginx
RUN mkdir -p /var/run && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# Switch to non-root user
USER nginx

# Expose port 3000 for the web application
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --quiet --tries=1 --spider http://localhost:3000/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]